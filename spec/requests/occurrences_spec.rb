require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/occurrences', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Occurrence. As you add validations to Occurrence, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @user = User.create!(name: 'Mumenya Nyamu', email: 'success@example.com', password: 'password',
                         password_confirmation: 'password')

    sign_in @user
    @category = Category.create!(name: 'Game', icon: 'ðŸŽ²', user: @user)
  end
  let(:valid_attributes) do
    {
      name: 'Football',
      amount: 300,
      user: @user,
      categories: [@category]
    }
  end

  let(:invalid_attributes) do
    {
      name: nil,
      amount: nil,
      user: @user,
      categories: []
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Occurrence.create! valid_attributes
      get category_occurrences_url(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      occurrence = Occurrence.create! valid_attributes
      get category_occurrence_url(@category, occurrence)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_category_occurrence_url(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      occurrence = Occurrence.create! valid_attributes
      get edit_category_occurrence_url(@category, occurrence)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Occurrence' do
        expect do
          post category_occurrences_url(@category), params: { occurrence: valid_attributes }
        end.to change(Occurrence, :count).by(1)
      end

      it 'redirects to the created occurrence' do
        post category_occurrences_url(@category), params: { occurrence: valid_attributes }
        expect(response).to redirect_to(category_occurrences_url(@category))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Occurrence' do
        expect do
          post category_occurrences_url(@category), params: { occurrence: invalid_attributes }
        end.to change(Occurrence, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post category_occurrences_url(@category), params: { occurrence: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'Soccer',
          amount: 100,
          user: @user,
          categories: [@category]
        }
      end

      it 'updates the requested occurrence' do
        occurrence = Occurrence.create! valid_attributes
        patch category_occurrence_url(@category, occurrence), params: { occurrence: new_attributes }
        occurrence.reload
        expect(occurrence.attributes).to include({ 'name' => 'Soccer' })
        expect(occurrence.attributes).to include({ 'amount' => 100 })
      end

      it 'redirects to the occurrence' do
        occurrence = Occurrence.create! valid_attributes
        patch category_occurrence_url(@category, occurrence), params: { occurrence: new_attributes }
        occurrence.reload
        expect(response).to redirect_to(category_occurrences_url(@category))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        occurrence = Occurrence.create! valid_attributes
        patch category_occurrence_url(@category, occurrence), params: { occurrence: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested occurrence' do
      occurrence = Occurrence.create! valid_attributes
      expect do
        delete category_occurrence_url(@category, occurrence)
      end.to change(Occurrence, :count).by(-1)
    end

    it 'redirects to the occurrences list' do
      occurrence = Occurrence.create! valid_attributes
      delete category_occurrence_url(@category, occurrence)
      expect(response).to redirect_to(category_occurrences_url(@category))
    end
  end
end
